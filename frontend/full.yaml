apiVersion: apps/v1
kind: Deployment
metadata:
  name: chat-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chat-app
  template:
    metadata:
      labels:
        app: chat-app
    spec:
      initContainers:
        - name: migrate
          image: anish60/chatbot-frontend:latest
          env:
            - name: DATABASE_URL
              value: "mysql://root:$(MYSQL_PASSWORD)@localhost:3306/chat_app"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          command:
            [
              "sh",
              "-c",
              "until npx prisma migrate dev --skip-seed; do echo 'Waiting for MySQL...'; sleep 5; done"
            ]
          resources:
            limits:
              memory: "3Gi"
              cpu: "500m"
            requests:
              memory: "2Gi"
              cpu: "250m"
      containers:
        - name: chat-app
          image: anish60/chatbot-frontend:latest
          ports:
            - containerPort: 3000
          env:
            - name: DATABASE_URL
              value: "mysql://root:$(MYSQL_PASSWORD)@mysql:3306/chat_app"
          envFrom:
            - configMapRef:
                name: frontend-configmap
            - secretRef:
                name: frontend-secret
          readinessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: chat-app
spec:
  selector:
    app: chat-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-configmap
data:
  NEXTAUTH_URL: "http://localhost:3000/api/auth"
  KEYCLOAK_CLIENT_ID: "anish"
  KEYCLOAK_ISSUER: "http://localhost:9000/realms/chat-app"
---
apiVersion: v1
kind: Secret
metadata:
  name: frontend-secret
type: Opaque
data:
  NEXTAUTH_SECRET: "MTIzNDU2"
  KEYCLOAK_CLIENT_SECRET: "T0E1NTg1RXNmZXBHTnpTcmVNVU9HYzVQWVJkQ0gx"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: mysql:latest
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/mysql"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      volumes:
        - name: keycloak-volume
          persistentVolumeClaim: 
            claimName: keycloak-persistent-storage
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:21.1
          args: ["start-dev"]
          ports:
            - containerPort: 8080
          env:
            - name: KEYCLOAK_ADMIN
              value: "admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
          volumeMounts:
            - mountPath: /opt/keycloak/data/h2
              name: keycloak-volume
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  selector:
    app: keycloak
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 8080
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: keycloak-pv
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: "/mnt/data/keycloak"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-persistent-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 400Mi

