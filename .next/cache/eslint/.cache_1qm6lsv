[{"/Users/anishbista/chatbot-app/chat/src/app/api/auth/[...nextauth]/route.ts":"1","/Users/anishbista/chatbot-app/chat/src/app/api/chats/[chatId]/messages/route.ts":"2","/Users/anishbista/chatbot-app/chat/src/app/api/chats/route.ts":"3","/Users/anishbista/chatbot-app/chat/src/app/api/generate-token/route.ts":"4","/Users/anishbista/chatbot-app/chat/src/app/api/helpers.ts":"5","/Users/anishbista/chatbot-app/chat/src/app/api/logout-url/route.ts":"6","/Users/anishbista/chatbot-app/chat/src/app/api/messages/[messageId]/events/route.example.ts":"7","/Users/anishbista/chatbot-app/chat/src/app/api/messages/[messageId]/events/route.ts":"8","/Users/anishbista/chatbot-app/chat/src/app/layout.tsx":"9","/Users/anishbista/chatbot-app/chat/src/app/login/page.tsx":"10","/Users/anishbista/chatbot-app/chat/src/app/page.tsx":"11","/Users/anishbista/chatbot-app/chat/src/components/ArrowRightIcon.tsx":"12","/Users/anishbista/chatbot-app/chat/src/components/ChatItem.tsx":"13","/Users/anishbista/chatbot-app/chat/src/components/ChatItemError.tsx":"14","/Users/anishbista/chatbot-app/chat/src/components/Loading.tsx":"15","/Users/anishbista/chatbot-app/chat/src/components/LogoutIcon.tsx":"16","/Users/anishbista/chatbot-app/chat/src/components/MessageIcon.tsx":"17","/Users/anishbista/chatbot-app/chat/src/components/PlusIcon.tsx":"18","/Users/anishbista/chatbot-app/chat/src/components/UserIcon.tsx":"19","/Users/anishbista/chatbot-app/chat/src/grpc/chat-service-client.ts":"20","/Users/anishbista/chatbot-app/chat/src/grpc/client.ts":"21","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/chat.ts":"22","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatRequest.ts":"23","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatResponse.ts":"24","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatService.ts":"25","/Users/anishbista/chatbot-app/chat/src/http/client-http.ts":"26","/Users/anishbista/chatbot-app/chat/src/lib/prisma.ts":"27","/Users/anishbista/chatbot-app/chat/src/middleware.ts":"28","/Users/anishbista/chatbot-app/chat/src/providers/SessionProvider.tsx":"29"},{"size":540,"mtime":1730021846920,"results":"30","hashOfConfig":"31"},{"size":1393,"mtime":1730020934991,"results":"32","hashOfConfig":"31"},{"size":984,"mtime":1730020934991,"results":"33","hashOfConfig":"31"},{"size":454,"mtime":1730020934991,"results":"34","hashOfConfig":"31"},{"size":672,"mtime":1730020934991,"results":"35","hashOfConfig":"31"},{"size":542,"mtime":1730020934991,"results":"36","hashOfConfig":"31"},{"size":844,"mtime":1730020934992,"results":"37","hashOfConfig":"31"},{"size":3570,"mtime":1730020934992,"results":"38","hashOfConfig":"31"},{"size":697,"mtime":1730020934992,"results":"39","hashOfConfig":"31"},{"size":501,"mtime":1730020934992,"results":"40","hashOfConfig":"31"},{"size":8313,"mtime":1730020934992,"results":"41","hashOfConfig":"31"},{"size":548,"mtime":1730020934992,"results":"42","hashOfConfig":"31"},{"size":1627,"mtime":1730020934992,"results":"43","hashOfConfig":"31"},{"size":736,"mtime":1730020934992,"results":"44","hashOfConfig":"31"},{"size":118,"mtime":1730020934992,"results":"45","hashOfConfig":"31"},{"size":581,"mtime":1730020934992,"results":"46","hashOfConfig":"31"},{"size":791,"mtime":1730020934992,"results":"47","hashOfConfig":"31"},{"size":455,"mtime":1730020934992,"results":"48","hashOfConfig":"31"},{"size":577,"mtime":1730020934992,"results":"49","hashOfConfig":"31"},{"size":886,"mtime":1730020934993,"results":"50","hashOfConfig":"31"},{"size":518,"mtime":1730020934993,"results":"51","hashOfConfig":"31"},{"size":677,"mtime":1730020934993,"results":"52","hashOfConfig":"31"},{"size":276,"mtime":1730020934993,"results":"53","hashOfConfig":"31"},{"size":226,"mtime":1730020934993,"results":"54","hashOfConfig":"31"},{"size":1454,"mtime":1730020934993,"results":"55","hashOfConfig":"31"},{"size":1402,"mtime":1730020934993,"results":"56","hashOfConfig":"31"},{"size":275,"mtime":1730020934993,"results":"57","hashOfConfig":"31"},{"size":164,"mtime":1730020934993,"results":"58","hashOfConfig":"31"},{"size":473,"mtime":1730020934993,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ncc1k2",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anishbista/chatbot-app/chat/src/app/api/auth/[...nextauth]/route.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/app/api/chats/[chatId]/messages/route.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/app/api/chats/route.ts",["157"],[],"import { JWT } from 'next-auth/jwt';\nimport { NextRequest, NextResponse } from 'next/server';\n\nimport { prisma } from '@/lib/prisma';\n\nimport { withAuth } from '../helpers';\n\nexport const POST = withAuth(async (request: NextRequest, token: JWT) => {\n  const body = await request.json();\n\n  const chatCreated = await prisma.chat.create({\n    data: {\n      user_id: token.sub!,\n      messages: {\n        create: {\n          content: body.message,\n        },\n      },\n    },\n    select: {\n      id: true,\n      messages: true,\n    },\n  });\n\n  return NextResponse.json(chatCreated);\n});\n\nexport const GET = withAuth(async (_request: NextRequest, token: JWT) => {\n  const chats = await prisma.chat.findMany({\n    select: {\n      id: true,\n      messages: {\n        orderBy: {\n          created_at: 'asc',\n        },\n        take: 1,\n      },\n    },\n    where: {\n      user_id: token.sub,\n    },\n    orderBy: {\n      created_at: 'desc',\n    },\n  });\n\n  return NextResponse.json(chats);\n});\n","/Users/anishbista/chatbot-app/chat/src/app/api/generate-token/route.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/app/api/helpers.ts",["158"],[],"import { JWT, getToken } from 'next-auth/jwt';\nimport { NextRequest, NextResponse } from 'next/server';\n\ntype Config = {\n  params: any;\n};\n\ntype RouteHandler = (\n  request: NextRequest,\n  token: JWT,\n  config: Config,\n) => Promise<NextResponse | Response> | NextResponse | Response;\n\nfunction withAuth(routeHandler: RouteHandler) {\n  return async (request: NextRequest, config: Config) => {\n    const token = await getToken({ req: request });\n\n    if (!token) {\n      return NextResponse.json(\n        { error: 'Not Authenticated' },\n        {\n          status: 401,\n        },\n      );\n    }\n\n    return routeHandler(request, token, config);\n  };\n}\n\nexport { withAuth };\n","/Users/anishbista/chatbot-app/chat/src/app/api/logout-url/route.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/app/api/messages/[messageId]/events/route.example.ts",["159","160"],[],"import { NextRequest } from 'next/server';\n\nexport async function GET(\n  _request: NextRequest,\n  { params: _params }: { params: { messageId: string } },\n) {\n  const transformStream = new TransformStream();\n  const writer = transformStream.writable.getWriter();\n  const encoder = new TextEncoder();\n\n  const randomNumbers = [...new Array(30).keys()];\n\n  setTimeout(() => {\n    randomNumbers.forEach(number => {\n      writer.write(encoder.encode(`event: message\\n`));\n      writer.write(encoder.encode(`id: ${new Date().getTime()}\\n`));\n      writer.write(encoder.encode(`data: ${number}\\n\\n`));\n    });\n\n    writer.close();\n  }, 2000);\n\n  return new Response(transformStream.readable, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      Connection: 'keep-alive',\n    },\n    status: 200,\n  });\n}\n","/Users/anishbista/chatbot-app/chat/src/app/api/messages/[messageId]/events/route.ts",["161"],[],"import { getToken } from 'next-auth/jwt';\nimport { NextRequest } from 'next/server';\n\nimport { ChatServiceClientFactory } from '@/grpc/chat-service-client';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { messageId: string } },\n) {\n  let messageReceived: { content: string; chatId: string } | null = null;\n\n  const transformStream = new TransformStream();\n  const writer = transformStream.writable.getWriter();\n\n  const token = await getToken({ req: request });\n\n  if (!token) {\n    setTimeout(async () => {\n      writeStream(writer, 'error', 'Unauthenticated');\n      await writer.close();\n    }, 100);\n\n    return response(transformStream, 401);\n  }\n\n  const message = await prisma.message.findUniqueOrThrow({\n    where: {\n      id: params.messageId,\n    },\n    include: {\n      chat: true,\n    },\n  });\n\n  if (message.chat.user_id !== token.sub) {\n    setTimeout(async () => {\n      writeStream(writer, 'error', 'Chat not found');\n      await writer.close();\n    }, 100);\n\n    return response(transformStream, 404);\n  }\n\n  if (message.has_answered) {\n    setTimeout(async () => {\n      writeStream(writer, 'error', 'Message already answered');\n      await writer.close();\n    }, 100);\n\n    return response(transformStream, 403);\n  }\n\n  if (message.is_from_bot) {\n    setTimeout(async () => {\n      writeStream(writer, 'error', 'Message from bot');\n      await writer.close();\n    }, 100);\n\n    return response(transformStream, 403);\n  }\n\n  const chatService = ChatServiceClientFactory.create();\n\n  const stream = chatService.chatStream({\n    user_id: '1',\n    chat_id: message.chat.remote_chat_id ?? undefined,\n    message: message.content,\n  });\n\n  stream.on('data', data => {\n    messageReceived = data;\n\n    writeStream(writer, 'message', data);\n  });\n\n  stream.on('error', async error => {\n    writeStream(writer, 'error', error.message);\n    await writer.close();\n  });\n\n  stream.on('end', async () => {\n    console.log('END');\n\n    if (!messageReceived) {\n      writeStream(writer, 'message', 'No message receive');\n      await writer.close();\n\n      return;\n    }\n\n    const [newMessage] = await prisma.$transaction([\n      prisma.message.create({\n        data: {\n          content: messageReceived.content,\n          chat_id: message.chat_id,\n          has_answered: true,\n          is_from_bot: true,\n        },\n      }),\n\n      prisma.chat.update({\n        where: {\n          id: message.chat_id,\n        },\n        data: {\n          remote_chat_id: messageReceived.chatId,\n        },\n      }),\n\n      prisma.message.update({\n        where: {\n          id: message.id,\n        },\n        data: {\n          has_answered: true,\n        },\n      }),\n    ]);\n\n    writeStream(writer, 'end', newMessage);\n    await writer.close();\n  });\n\n  return response(transformStream);\n}\n\nfunction response(responseStream: TransformStream, status = 200) {\n  return new Response(responseStream.readable, {\n    status,\n    headers: {\n      'Content-Type': 'text/event-stream',\n      Connection: 'keep-alive',\n      'Cache-Control': 'no-cache, no-transform',\n    },\n  });\n}\n\ntype Event = 'message' | 'error' | 'end';\n\nfunction writeStream(\n  writer: WritableStreamDefaultWriter,\n  event: Event,\n  data: any,\n) {\n  const encoder = new TextEncoder();\n\n  writer.write(encoder.encode(`event: ${event}\\n`));\n  writer.write(encoder.encode(`id: ${new Date().getTime()}\\n`));\n\n  const streamData = typeof data === 'string' ? data : JSON.stringify(data);\n\n  writer.write(encoder.encode(`data: ${streamData}\\n\\n`));\n}\n","/Users/anishbista/chatbot-app/chat/src/app/layout.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/app/login/page.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/app/page.tsx",["162","163","164"],[],"'use client';\n\nimport { signOut } from 'next-auth/react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport {\n  FormEvent,\n  KeyboardEvent,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport useSWR from 'swr';\nimport useSWRSubscription from 'swr/subscription';\n\nimport { ArrowRightIcon } from '@/components/ArrowRightIcon';\nimport { ChatItem } from '@/components/ChatItem';\nimport { ChatItemError } from '@/components/ChatItemError';\nimport { LogoutIcon } from '@/components/LogoutIcon';\nimport { MessageIcon } from '@/components/MessageIcon';\nimport { PlusIcon } from '@/components/PlusIcon';\nimport { ClientHttp, fetcher } from '@/http/client-http';\nimport { Chat, Message } from '@prisma/client';\n\ntype ChatWithFirstMessage = Chat & {\n  messages: Message[];\n};\n\nconst HomePage = () => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  const chatIdParam = searchParams.get('chatId');\n\n  const [chatId, setChatId] = useState<string | null>(chatIdParam);\n  const [messageId, setMessageId] = useState<string | null>(null);\n\n  const formRef = useRef<HTMLFormElement>(null);\n  const buttonFormSubmit = useRef<HTMLButtonElement>(null);\n\n  const { data: chats, mutate: mutateChats } = useSWR<ChatWithFirstMessage[]>(\n    '/chats',\n    fetcher,\n    {\n      fallbackData: [],\n      revalidateOnFocus: false,\n    },\n  );\n  const { data: messages, mutate: mutateMessages } = useSWR<Message[]>(\n    chatId ? `/chats/${chatId}/messages` : null,\n    fetcher,\n    {\n      fallbackData: [],\n      revalidateOnFocus: false,\n    },\n  );\n\n  const { data: messageLoading, error: messageLoadingError } =\n    useSWRSubscription(\n      messageId ? `/api/messages/${messageId}/events` : null,\n      (path: string, { next }) => {\n        const eventSource = new EventSource(path);\n\n        eventSource.onmessage = event => {\n          const newMessage = JSON.parse(event.data) as { content: string };\n\n          next(null, newMessage.content);\n        };\n\n        eventSource.onerror = event => {\n          eventSource.close();\n\n          // @ts-ignore\n          next(event.data, null);\n        };\n\n        eventSource.addEventListener('end', event => {\n          eventSource.close();\n\n          const newMessage = JSON.parse(event.data);\n\n          mutateMessages(messages => [...messages!, newMessage], false);\n\n          next(null, null);\n        });\n\n        return () => {\n          console.log('CLOSE EVENT SOURCE');\n          eventSource.close();\n        };\n      },\n    );\n\n  async function onSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    const textArea = event.currentTarget.querySelector(\n      'textarea',\n    ) as HTMLTextAreaElement;\n    const message = textArea.value;\n\n    if (!textArea.value) {\n      return;\n    }\n\n    if (!chatId) {\n      const newChat: ChatWithFirstMessage = await ClientHttp.post('/chats', {\n        message,\n      });\n\n      mutateChats([newChat, ...chats!], false);\n      setChatId(newChat.id);\n      setMessageId(newChat.messages[0].id);\n    } else {\n      const newMessage: Message = await ClientHttp.post(\n        `/chats/${chatId}/messages`,\n        { message },\n      );\n\n      mutateMessages([...messages!, newMessage], false);\n      setMessageId(newMessage.id);\n    }\n\n    textArea.value = '';\n  }\n\n  function textAreaOnKeyUp(event: KeyboardEvent<HTMLTextAreaElement>) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      if (formRef.current && buttonFormSubmit.current) {\n        formRef.current.requestSubmit(buttonFormSubmit.current);\n      }\n    }\n\n    if (event.currentTarget.scrollHeight >= 200) {\n      event.currentTarget.style.overflowY = 'scroll';\n    } else {\n      event.currentTarget.style.overflowY = 'hidden';\n      event.currentTarget.style.height = 'auto';\n      event.currentTarget.style.height =\n        event.currentTarget.scrollHeight + 'px';\n    }\n  }\n\n  function textAreaOnKeyDown(event: KeyboardEvent<HTMLTextAreaElement>) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n    }\n  }\n\n  async function logout() {\n    await signOut({ redirect: false });\n\n    const { url: logoutUrl } = (await ClientHttp.get(\n      `logout-url?${new URLSearchParams({ redirect: window.location.origin })}`,\n    )) as { url: string };\n\n    window.location.href = logoutUrl;\n  }\n\n  useEffect(() => {\n    setChatId(chatIdParam);\n  }, [chatIdParam]);\n\n  useLayoutEffect(() => {\n    if (!messageLoading) {\n      return;\n    }\n\n    const chatting = document.querySelector('#chatting') as HTMLUListElement;\n\n    chatting.scrollTop = chatting.scrollHeight;\n  }, [messageLoading]);\n\n  return (\n    <main className=\"flex relative w-full h-full overflow-hidden\">\n      {/* -- sidebar -- */}\n      <aside className=\"flex h-screen flex-col w-[300px] p-2 bg-gray-900\">\n        {/* -- button new chat -- */}\n        <button\n          className=\"flex p-3 gap-3 rounded hover:bg-gray-500/10 transition-colors duration-200 text-white cursor-pointer text-sm mb-1 border border-white/20\"\n          onClick={() => {\n            router.push('/');\n\n            setChatId(null);\n            setMessageId(null);\n          }}\n        >\n          <PlusIcon className=\"w-5 h-5\" />\n          New chat\n        </button>\n        {/* -- end button new chat -- */}\n\n        {/* -- chats -- */}\n        <div className=\"flex-grow overflow-y-auto -mr-2 overflow-hidden\">\n          {chats?.map((chat, key) => (\n            <div className=\"pb-2 text-gray-100 text-sm mr-2\" key={key}>\n              <button\n                className=\"flex p-3 gap-3 rounded hover:bg-[#3f4679] cursor-pointer hover:pr-4 group w-full\"\n                type=\"button\"\n                onClick={() => router.push(`/?chatId=${chat.id}`)}\n              >\n                <MessageIcon className=\"h-5 w-5\" />\n                <div className=\"max-h-5 overflow-hidden break-all relative w-full text-left\">\n                  {chat.messages[0].content}\n                  <div className=\"absolute inset-y-0 right-0 w-8 z-10 bg-gradient-to-l from-gray-900 group-hover:from-[#3f4679]\"></div>\n                </div>\n              </button>\n            </div>\n          ))}\n        </div>\n\n        <button\n          className=\"flex p-3 mt-1 gap-3 rounded hover:bg-gray-500/10 text-sm text-white\"\n          onClick={logout}\n        >\n          <LogoutIcon className=\"h-5 w-5\" />\n          Log out\n        </button>\n      </aside>\n      {/* -- end sidebar -- */}\n\n      {/* -- main content */}\n      <section className=\"flex-1 flex-col relative\">\n        <ul id=\"chatting\" className=\"h-screen overflow-y-auto bg-gray-800\">\n          {messages?.map(message => (\n            <ChatItem\n              key={message.id}\n              content={message.content}\n              is_from_bot={message.is_from_bot}\n            />\n          ))}\n\n          {messageLoading && (\n            <ChatItem content={messageLoading} is_from_bot loading />\n          )}\n\n          {messageLoadingError && (\n            <ChatItemError>{messageLoadingError}</ChatItemError>\n          )}\n\n          <li className=\"h-36 bg-gray-800\"></li>\n        </ul>\n\n        <div className=\"absolute bottom-0 w-full !bg-transparent bg-gradient-to-b from-gray-800 to-gray-950/40\">\n          <div className=\"pt-6 mb-6 mx-auto max-w-3xl\">\n            <form ref={formRef} onSubmit={onSubmit}>\n              <div className=\"flex flex-col py-3 pl-4 relative text-white bg-gray-700 rounded\">\n                <textarea\n                  className=\"resize-none pr-14 bg-transparent pl-0 outline-none\"\n                  placeholder=\"Type your message...\"\n                  tabIndex={0}\n                  rows={1}\n                  onKeyUp={textAreaOnKeyUp}\n                  onKeyDown={textAreaOnKeyDown}\n                />\n\n                <button\n                  ref={buttonFormSubmit}\n                  type=\"submit\"\n                  className=\"absolute top-1 text-gray-400 hover:text-gray-500 transition-colors bottom-2.5 rounded md:right-4\"\n                  disabled={messageLoading}\n                >\n                  <ArrowRightIcon className=\"text-white-500 w-8\" />\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n      {/* -- main content */}\n    </main>\n  );\n};\n\nexport default HomePage;\n","/Users/anishbista/chatbot-app/chat/src/components/ArrowRightIcon.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/ChatItem.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/ChatItemError.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/Loading.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/LogoutIcon.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/MessageIcon.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/PlusIcon.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/components/UserIcon.tsx",[],[],"/Users/anishbista/chatbot-app/chat/src/grpc/chat-service-client.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/grpc/client.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/grpc/rpc/chat.ts",["165","166","167"],[],"import type * as grpc from '@grpc/grpc-js';\nimport type { MessageTypeDefinition } from '@grpc/proto-loader';\n\nimport type {\n  ChatServiceClient as _pb_ChatServiceClient,\n  ChatServiceDefinition as _pb_ChatServiceDefinition,\n} from './pb/ChatService';\n\ntype SubtypeConstructor<\n  Constructor extends new (...args: any) => any,\n  Subtype,\n> = {\n  new (...args: ConstructorParameters<Constructor>): Subtype;\n};\n\nexport interface ProtoGrpcType {\n  pb: {\n    ChatRequest: MessageTypeDefinition;\n    ChatResponse: MessageTypeDefinition;\n    ChatService: SubtypeConstructor<\n      typeof grpc.Client,\n      _pb_ChatServiceClient\n    > & { service: _pb_ChatServiceDefinition };\n  };\n}\n","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatRequest.ts",["168","169"],[],"// Original file: proto/chat.proto\n\nexport interface ChatRequest {\n  chatId?: string;\n  userId?: string;\n  userMessage?: string;\n  _chatId?: 'chatId';\n}\n\nexport interface ChatRequest__Output {\n  chatId?: string;\n  userId: string;\n  userMessage: string;\n  _chatId: 'chatId';\n}\n","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatResponse.ts",["170","171"],[],"// Original file: proto/chat.proto\n\nexport interface ChatResponse {\n  chatId?: string;\n  userId?: string;\n  content?: string;\n}\n\nexport interface ChatResponse__Output {\n  chatId: string;\n  userId: string;\n  content: string;\n}\n","/Users/anishbista/chatbot-app/chat/src/grpc/rpc/pb/ChatService.ts",["172","173","174"],[],"// Original file: proto/chat.proto\n\nimport type * as grpc from '@grpc/grpc-js';\nimport type { MethodDefinition } from '@grpc/proto-loader';\n\nimport type {\n  ChatRequest as _pb_ChatRequest,\n  ChatRequest__Output as _pb_ChatRequest__Output,\n} from '../pb/ChatRequest';\nimport type {\n  ChatResponse as _pb_ChatResponse,\n  ChatResponse__Output as _pb_ChatResponse__Output,\n} from '../pb/ChatResponse';\n\nexport interface ChatServiceClient extends grpc.Client {\n  ChatStream(\n    argument: _pb_ChatRequest,\n    metadata: grpc.Metadata,\n    options?: grpc.CallOptions,\n  ): grpc.ClientReadableStream<_pb_ChatResponse__Output>;\n  ChatStream(\n    argument: _pb_ChatRequest,\n    options?: grpc.CallOptions,\n  ): grpc.ClientReadableStream<_pb_ChatResponse__Output>;\n  chatStream(\n    argument: _pb_ChatRequest,\n    metadata: grpc.Metadata,\n    options?: grpc.CallOptions,\n  ): grpc.ClientReadableStream<_pb_ChatResponse__Output>;\n  chatStream(\n    argument: _pb_ChatRequest,\n    options?: grpc.CallOptions,\n  ): grpc.ClientReadableStream<_pb_ChatResponse__Output>;\n}\n\nexport interface ChatServiceHandlers extends grpc.UntypedServiceImplementation {\n  ChatStream: grpc.handleServerStreamingCall<\n    _pb_ChatRequest__Output,\n    _pb_ChatResponse\n  >;\n}\n\nexport interface ChatServiceDefinition extends grpc.ServiceDefinition {\n  ChatStream: MethodDefinition<\n    _pb_ChatRequest,\n    _pb_ChatResponse,\n    _pb_ChatRequest__Output,\n    _pb_ChatResponse__Output\n  >;\n}\n","/Users/anishbista/chatbot-app/chat/src/http/client-http.ts",["175","176"],[],"class ClientHttp {\n  static API_URL = '/api';\n\n  static async get(path: string) {\n    const response = await fetch(`${ClientHttp.API_URL}/${path}`);\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  static async post(path: string, body: any) {\n    const response = await fetch(`${ClientHttp.API_URL}/${path}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  static async put(path: string, body: any) {\n    const response = await fetch(`${ClientHttp.API_URL}/${path}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  static async delete(path: string) {\n    const response = await fetch(`${ClientHttp.API_URL}/${path}`, {\n      method: 'DELETE',\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n}\n\nconst fetcher = (path: string) => ClientHttp.get(path);\n\nexport { ClientHttp, fetcher };\n","/Users/anishbista/chatbot-app/chat/src/lib/prisma.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/middleware.ts",[],[],"/Users/anishbista/chatbot-app/chat/src/providers/SessionProvider.tsx",[],[],{"ruleId":"177","severity":1,"message":"178","line":13,"column":16,"nodeType":"179","messageId":"180","endLine":13,"endColumn":26},{"ruleId":"181","severity":1,"message":"182","line":5,"column":11,"nodeType":"183","messageId":"184","endLine":5,"endColumn":14,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":4,"column":3,"nodeType":"188","messageId":"189","endLine":4,"endColumn":24},{"ruleId":"186","severity":1,"message":"190","line":5,"column":13,"nodeType":"188","messageId":"189","endLine":5,"endColumn":20},{"ruleId":"181","severity":1,"message":"182","line":144,"column":9,"nodeType":"183","messageId":"184","endLine":144,"endColumn":12,"suggestions":"191"},{"ruleId":"177","severity":1,"message":"178","line":82,"column":42,"nodeType":"179","messageId":"180","endLine":82,"endColumn":51},{"ruleId":"177","severity":1,"message":"178","line":111,"column":32,"nodeType":"179","messageId":"180","endLine":111,"endColumn":38},{"ruleId":"177","severity":1,"message":"178","line":120,"column":26,"nodeType":"179","messageId":"180","endLine":120,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":10,"column":37,"nodeType":"183","messageId":"184","endLine":10,"endColumn":40,"suggestions":"192"},{"ruleId":"181","severity":1,"message":"182","line":10,"column":45,"nodeType":"183","messageId":"184","endLine":10,"endColumn":48,"suggestions":"193"},{"ruleId":"194","severity":2,"message":"195","line":16,"column":18,"nodeType":"188","messageId":"196","endLine":16,"endColumn":31},{"ruleId":"194","severity":2,"message":"197","line":3,"column":18,"nodeType":"188","messageId":"196","endLine":3,"endColumn":29},{"ruleId":"194","severity":2,"message":"198","line":10,"column":18,"nodeType":"188","messageId":"196","endLine":10,"endColumn":37},{"ruleId":"194","severity":2,"message":"199","line":3,"column":18,"nodeType":"188","messageId":"196","endLine":3,"endColumn":30},{"ruleId":"194","severity":2,"message":"200","line":9,"column":18,"nodeType":"188","messageId":"196","endLine":9,"endColumn":38},{"ruleId":"194","severity":2,"message":"201","line":15,"column":18,"nodeType":"188","messageId":"196","endLine":15,"endColumn":35},{"ruleId":"194","severity":2,"message":"202","line":36,"column":18,"nodeType":"188","messageId":"196","endLine":36,"endColumn":37},{"ruleId":"194","severity":2,"message":"203","line":43,"column":18,"nodeType":"188","messageId":"196","endLine":43,"endColumn":39},{"ruleId":"181","severity":1,"message":"182","line":16,"column":41,"nodeType":"183","messageId":"184","endLine":16,"endColumn":44,"suggestions":"204"},{"ruleId":"181","severity":1,"message":"182","line":34,"column":40,"nodeType":"183","messageId":"184","endLine":34,"endColumn":43,"suggestions":"205"},"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["206","207"],"@typescript-eslint/no-unused-vars","'_request' is defined but never used.","Identifier","unusedVar","'_params' is defined but never used.",["208","209"],["210","211"],["212","213"],"@typescript-eslint/naming-convention","Interface name `ProtoGrpcType` must match the RegExp: /^I[A-Z]/u","satisfyCustom","Interface name `ChatRequest` must match the RegExp: /^I[A-Z]/u","Interface name `ChatRequest__Output` must match the RegExp: /^I[A-Z]/u","Interface name `ChatResponse` must match the RegExp: /^I[A-Z]/u","Interface name `ChatResponse__Output` must match the RegExp: /^I[A-Z]/u","Interface name `ChatServiceClient` must match the RegExp: /^I[A-Z]/u","Interface name `ChatServiceHandlers` must match the RegExp: /^I[A-Z]/u","Interface name `ChatServiceDefinition` must match the RegExp: /^I[A-Z]/u",["214","215"],["216","217"],{"messageId":"218","fix":"219","desc":"220"},{"messageId":"221","fix":"222","desc":"223"},{"messageId":"218","fix":"224","desc":"220"},{"messageId":"221","fix":"225","desc":"223"},{"messageId":"218","fix":"226","desc":"220"},{"messageId":"221","fix":"227","desc":"223"},{"messageId":"218","fix":"228","desc":"220"},{"messageId":"221","fix":"229","desc":"223"},{"messageId":"218","fix":"230","desc":"220"},{"messageId":"221","fix":"231","desc":"223"},{"messageId":"218","fix":"232","desc":"220"},{"messageId":"221","fix":"233","desc":"223"},"suggestUnknown",{"range":"234","text":"235"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"234","text":"236"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"237","text":"235"},{"range":"237","text":"236"},{"range":"238","text":"235"},{"range":"238","text":"236"},{"range":"239","text":"235"},{"range":"239","text":"236"},{"range":"240","text":"235"},{"range":"240","text":"236"},{"range":"241","text":"235"},{"range":"241","text":"236"},[131,134],"unknown","never",[3265,3268],[313,316],[321,324],[321,324],[701,704]]